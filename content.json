{"meta":{"title":"lselyの博客","subtitle":"勤勤恳恳写代码，慵慵懒懒摆摆烂","description":"前进！不择手段的前进！","author":"lsely","url":"http://example.com","root":"/"},"pages":[{"title":"关于我","date":"2022-12-11T07:57:34.000Z","updated":"2022-12-11T14:10:00.681Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"你进来干什么？想了解一下我？好吧. 性别：男年龄：X2 岁体重：X5 kg身高：173 cm主力语言：C++,Java身份：程序员 * 学生爱好：写应用和打游戏CSDN：https://blog.csdn.net/lsely?type=blogBiliBili：https://space.bilibili.com/493677860?spm_id_from=333.1007.0.0知乎：https://www.zhihu.com/people/lsely-87"},{"title":"分类","date":"2022-12-11T08:00:45.000Z","updated":"2022-12-12T00:37:20.440Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2022-12-11T07:59:51.000Z","updated":"2022-12-12T00:42:09.986Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"2分钟速看Cookie","slug":"2分钟速看Cookie","date":"2022-12-11T14:02:46.000Z","updated":"2022-12-12T00:46:53.309Z","comments":true,"path":"2022/12/11/2分钟速看Cookie/","link":"","permalink":"http://example.com/2022/12/11/2%E5%88%86%E9%92%9F%E9%80%9F%E7%9C%8BCookie/","excerpt":"此文只是介绍Cookie一些基础知识和构成Cookie的组成部件，并不介绍用法。 Cookie是什么？Cookie , 在百度百科中的介绍是指”储存在用户本地终端上的数据”,用人话来说就类似于浏览器在本地的缓存，它是网站用来识别用户的一个文本。一般来说，在我们打开网站时，网站的Web服务器会为用户生成一个ID信息，可以说这就是用户的网络”身份证“，然后这个”身份证“就会保存到用户的电脑本地，以后如果用户再次登入这个网站，Web服务器就可以读取这个文本，就可以获取用户的各个信息了，这个过程也就是登录。","text":"此文只是介绍Cookie一些基础知识和构成Cookie的组成部件，并不介绍用法。 Cookie是什么？Cookie , 在百度百科中的介绍是指”储存在用户本地终端上的数据”,用人话来说就类似于浏览器在本地的缓存，它是网站用来识别用户的一个文本。一般来说，在我们打开网站时，网站的Web服务器会为用户生成一个ID信息，可以说这就是用户的网络”身份证“，然后这个”身份证“就会保存到用户的电脑本地，以后如果用户再次登入这个网站，Web服务器就可以读取这个文本，就可以获取用户的各个信息了，这个过程也就是登录。 Cookie的发送机制总体来说，每当我们第一次登录一个网站时，Web服务器就会发送一个Cookie到用户本地，在以后的登录中，用户本地的Cookie就会发送到Web服务器，从而验证自己的账户，用一张图来表示： Cookie的组成Cookie本质上还是一个文本数据，一般这个数据是经过加密的，由名称，值，还有几个用于控制Cookie使用范围或有效时间等量组成。 名称和值 Name/Value：Cookie的名称以及值。 有效期 Expires：Cookie的有效期。Expriers分为两种存储方式：会话性与持久性。会话性Cookie，保存在用户的内存中，会在推出浏览器时清空；而持久性Cookie会保存在用户的本地硬盘中，直至用户退出登录时才会失效 。说人话就是一个临时存储，一个长久存储。 使用范围 Domain：Cookie的使用于访问范围。 安全性 Secure：Cookie是否使用Https协议。 总结Cookie是网站用于识别用户身份，保存在用户本地上的数据（经过加密），由用户本地暂时或长久保存的文本数据，一般由名称，值，有效期，使用范围等组成。","categories":[{"name":"前端","slug":"前端","permalink":"http://example.com/categories/%E5%89%8D%E7%AB%AF/"},{"name":"Web","slug":"前端/Web","permalink":"http://example.com/categories/%E5%89%8D%E7%AB%AF/Web/"}],"tags":[{"name":"Web","slug":"Web","permalink":"http://example.com/tags/Web/"},{"name":"前端","slug":"前端","permalink":"http://example.com/tags/%E5%89%8D%E7%AB%AF/"},{"name":"小知识","slug":"小知识","permalink":"http://example.com/tags/%E5%B0%8F%E7%9F%A5%E8%AF%86/"}]},{"title":"上千字干货带你深入了解C/C++动态规划","slug":"上千字干货带你深入了解C-C-动态规划","date":"2022-12-11T13:58:52.000Z","updated":"2022-12-12T00:47:53.190Z","comments":true,"path":"2022/12/11/上千字干货带你深入了解C-C-动态规划/","link":"","permalink":"http://example.com/2022/12/11/%E4%B8%8A%E5%8D%83%E5%AD%97%E5%B9%B2%E8%B4%A7%E5%B8%A6%E4%BD%A0%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3C-C-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/","excerpt":"提醒：本文需读者具有以下C/C++基础： 循环结构，数组 函数 递归","text":"提醒：本文需读者具有以下C/C++基础： 循环结构，数组 函数 递归 动态规划的定义 动态规划（Dynamic Programming，简称DP），是一种通过把复杂问题分解为相对简单的子问题的方式求解最优策略的方法，可以有效的解决背包问题、资源分配问题、最短路径问题和复杂系统可靠性问题等求最优解策略问题。dynamic programming is a method for solving a complex problem by breaking it down into a collection of simpler subproblems. ——Wikipedia译文：一般这些子问题很相似，可以通过函数关系式递推出来。然后呢，动态规划就致力于解决每个子问题一次，减少重复计算,比如斐波那契数列就可以看做入门级的经典动态规划问题。 ——维基百科 说实话，我看我也头痛，拿来装杯不错，真理解还得靠自己啊！我给大家翻译翻译什么叫动态规划：动态规划，别看名字很高深，其实本质就是将复杂的问题化为简单的子问题，再将子问题化为更为简单的子问题，直至简单到不能再简单，一下就能给出答案的程度。就酱，很复杂的题就迎刃而解了。还有动态规划Plus版，就是将每一次子问题的答案保存下来，这样以后要用到时直接调用就行了，效率更上十层楼。也就是记忆化搜索。 什么？还不能理解？那就看这几个小剧场： A：1+2+3+4+5+6+7=28，那么1+2+3+4+5+6+7+8等于几？B：36。A：你是怎么算出来的？B：1+2+3+4+5+6+7=28，那么1+2+3+4+5+6+7+8=28+8=36. 这就是记忆化搜索。 核心思想我个人将其总结为一型三征，一型就是动态规划适合解决的问题的模型， 三征也就是三个特征：最优子结构，无后效性，记忆化搜索。 由于过于抽象，以下内容不要求全部背下，但一定要能够说出这三个性质中粗体部分。1.最优子结构如果问题的最优解所包含的子问题的解也是最优的，我们就称该问题具有最优子结构性质（即满足最优化原理）。最优子结构性质为动态规划算法解决问题提供了重要线索。2.无后效性即子问题的解一旦确定，就不再改变，不受在这之后、包含它的更大的问题的求解决策影响。3.记忆化搜索也称子问题重叠性质，子问题重叠性质是指在用递归算法自顶向下对问题进行求解时，每次产生的子问题并不总是新问题，有些子问题会被重复计算多次。动态规划算法正是利用了这种子问题的重叠性质，每次计算完一次子问题的答案，再将答案保存下来，在遇到重复的自问题时直接调用之前保存的答案，从而获得更高的效率。 解题步骤综上所述，那么基本的动态规划题目的解题步骤大体就是酱：1. 寻找最优子结构(状态表示)2. 写出状态转移方程(状态计算)3. 边界初始化 光说不练是假把式，我们先来看一道力扣极为经典的题目——斐波那契数列。 509.斐波那契数列 某网友：啊，这个我熟！肥波纳粹数列！我：emm….. 滚去练打字！ 本题链接： 509. 斐波那契数 - 力扣（LeetCode） 题目描述 斐波那契数 （通常用 F(n) 表示）形成的序列称为 斐波那契数列 。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是： 12F(0) = 0，F(1) = 1F(n) = F(n - 1) + F(n - 2)，其中 n &gt; 1 给定 n ，请计算 F(n) 。 哎呀，这时候可能有人要说了： 欸嘿嘿，这不简单，直接一个递归不就行了吗 于是他兴冲冲地写完代码： 1234567class Solution &#123;public: int fib(int n) &#123; if(n==0||n==1) return n; return fib(n-1)+fib(n-2); &#125;&#125;; 复制粘贴提交： 可以看到勉强虽然但是差不多通过了，但用时极其夸张，那这是为什么呢？别急，我们先来分析一下这个代码的运算过程。 代码分析我们设 n=5 时，来看一下程序的运算过程： 欸，你发现了什么？ fib (3)在计算过程中计算了两次 没错，上图中圈画的fib (3)在计算过程中计算了两次，而当我们把 n 设的更大，比如说 n=7。 会发现重复计算已经不是一次两次了，甚至是整个分支都存在重复。而计算越庞大，比如 n=1000,10000，重复计算也就越多，时间复杂度就十分恐怖了， 要不是力扣大大好，题目中设定了 0&lt;=n&lt;=30，也就是不可能超过30，这样做法肯定会超时。既然存在这么大的问题，那要怎么优化呢？ 优化方案没错，记忆化搜索，我们在前面讲过了，当子问题存在大量重复计算时，利用子问题重叠性质，就可以将子问题的答案记录下来，在需要用到时就直接调用，一劳永逸，很轻松就解决了重复计算的问题。 123456789101112131415class Solution &#123;public: int fib(int n) &#123; if (n &lt; 2) &#123; return n; &#125; int p = 0, q = 0, r = 1; for (int i = 2; i &lt;= n; ++i) &#123; p = q; q = r; r = p + q; &#125; return r; &#125;&#125;; 提交上去： 效率完爆递归算法。 练习题单做完这道题，是不是觉得自己又”行”了？ 那我可得好好挫挫你的锐气，动态规划难题多的是！来，收下这份大礼包（难度依次增加）： 70. 爬楼梯 - 力扣（LeetCode） 746. 使用最小花费爬楼梯 - 力扣（LeetCode） Loading Question… - 力扣（LeetCode） 5. 最长回文子串 - 力扣（LeetCode） 53. 最大子数组和 - 力扣（LeetCode） 95. 不同的二叉搜索树 II - 力扣（LeetCode） 213. 打家劫舍 II - 力扣（LeetCode） 32. 最长有效括号 - 力扣（LeetCode） 123. 买卖股票的最佳时机 III - 力扣（LeetCode） 689. 三个无重叠子数组的最大和 - 力扣（LeetCode） ——————本文完结撒花——————","categories":[{"name":"C/C++","slug":"C-C","permalink":"http://example.com/categories/C-C/"},{"name":"后端","slug":"C-C/后端","permalink":"http://example.com/categories/C-C/%E5%90%8E%E7%AB%AF/"},{"name":"算法","slug":"C-C/后端/算法","permalink":"http://example.com/categories/C-C/%E5%90%8E%E7%AB%AF/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"C/C++","slug":"C-C","permalink":"http://example.com/tags/C-C/"},{"name":"算法","slug":"算法","permalink":"http://example.com/tags/%E7%AE%97%E6%B3%95/"},{"name":"动态规划","slug":"动态规划","permalink":"http://example.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"}]}],"categories":[{"name":"前端","slug":"前端","permalink":"http://example.com/categories/%E5%89%8D%E7%AB%AF/"},{"name":"Web","slug":"前端/Web","permalink":"http://example.com/categories/%E5%89%8D%E7%AB%AF/Web/"},{"name":"C/C++","slug":"C-C","permalink":"http://example.com/categories/C-C/"},{"name":"后端","slug":"C-C/后端","permalink":"http://example.com/categories/C-C/%E5%90%8E%E7%AB%AF/"},{"name":"算法","slug":"C-C/后端/算法","permalink":"http://example.com/categories/C-C/%E5%90%8E%E7%AB%AF/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"Web","slug":"Web","permalink":"http://example.com/tags/Web/"},{"name":"前端","slug":"前端","permalink":"http://example.com/tags/%E5%89%8D%E7%AB%AF/"},{"name":"小知识","slug":"小知识","permalink":"http://example.com/tags/%E5%B0%8F%E7%9F%A5%E8%AF%86/"},{"name":"C/C++","slug":"C-C","permalink":"http://example.com/tags/C-C/"},{"name":"算法","slug":"算法","permalink":"http://example.com/tags/%E7%AE%97%E6%B3%95/"},{"name":"动态规划","slug":"动态规划","permalink":"http://example.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"}]}