{"meta":{"title":"lselyの博客","subtitle":"勤勤恳恳写代码，慵慵懒懒摆摆烂","description":"前进！不择手段的前进！","author":"lsely","url":"http://example.com","root":"/"},"pages":[{"title":"关于我","date":"2022-12-11T07:57:34.000Z","updated":"2022-12-12T07:24:26.503Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"你进来干什么？ 想了解一下我？好吧. 博客所有者资料 性别：男 年龄：■2 体重：■5 kg 身高：1■5 cm 主力语言：C++,Java,平时写应用之类的就用这俩货;也会Python,但主要用来爬好康的。 身份：程序员 * 学生 爱好：写应用和打游戏"},{"title":"分类","date":"2022-12-11T08:00:45.000Z","updated":"2022-12-12T00:37:20.440Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"Flag","date":"2022-12-12T02:18:54.000Z","updated":"2022-12-12T07:16:48.768Z","comments":true,"path":"flag/index.html","permalink":"http://example.com/flag/index.html","excerpt":"","text":"1. 写完TBOX++ 2. 学习鸿蒙开发 3. 继续完善博客 4. 写完《Java-GUI程序开发》 5. 写一篇《Github Page+Hexo静态博客搭建教程》"},{"title":"标签","date":"2022-12-11T07:59:51.000Z","updated":"2022-12-12T00:42:09.986Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"计算机思维导论及C/C++开发环境搭建","slug":"计算机思维导论及C-C-开发环境搭建","date":"2022-12-12T08:27:07.000Z","updated":"2022-12-12T10:24:27.777Z","comments":true,"path":"2022/12/12/计算机思维导论及C-C-开发环境搭建/","link":"","permalink":"http://example.com/2022/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%80%9D%E7%BB%B4%E5%AF%BC%E8%AE%BA%E5%8F%8AC-C-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/","excerpt":"计算机自1946年问世以来，几乎改变了整个世界。","text":"计算机自1946年问世以来，几乎改变了整个世界。 现在我们可以通过电脑来做很多事情，比如我们常常听到的什么人工智能、电子竞技、大数据等等，都和计算机息息相关，包括我们现在的手机、平板等智能设备，也是计算机转变而来的。各位可以看看最顶上的这张图片，如果你在小时候接触过计算机，那么一定对这张图片（照片拍摄于1996年，在美国加利福尼亚州加利福尼亚州的锁诺玛县）印象深刻，这张壁纸作为WindowsXP系统的默认壁纸，曾经展示在千家万户的电脑屏幕上。 也许你没有接触过计算机，也许你唯一接触计算机就是用来打游戏，也有可能你曾经捣鼓过计算机，在学习C语言之前，先让我们来了解一下计算机的世界。 计算机的世界计算机虽然名字听着很高级，不过它也是由一个个简单电路组成的。 这是我们在初中就学习过的电路图，不过这种电路太过简单，只能完成一些很基础的的操作，比如点亮小灯泡等。 很明显想要实现计算机怎么高级的运算机器，肯定是做不到的，这时我们就需要引入更加强大的数字电路了。 用数字信号完成对数字量进行算术运算和逻辑运算的电路称为数字电路，或数字系统。由于它具有逻辑运算和逻辑处理功能，所以又称数字逻辑电路。现代的数字电路由半导体工艺制成的若干数字集成器件构造而成。逻辑门是数字逻辑电路的基本单元。 计算机专业一般会在大一开放《数字电路》这门课程，会对计算机底层的数字电路实现原理进行详细介绍。 数字电路引入了逻辑判断，我们来看看简单的数字电路： 数字电路中，用电压的高低来区分出两种信号，低电压表示0，高电压表示1，由于只能通过这种方式表示出两种类型的信号，所以计算机采用的是二进制。 二进制是计算技术中广泛采用的一种数制。二进制数据是用0和1两个数码来表示的数。它的基数为2，进位规则是“逢二进一”，借位规则是“借一当二”。 比如我们一般采用的都是十进制表示，比如9再继续加1的话，就需要进位了，变成10，在二进制中，因为只有0和1，所以当1继续加1时，就需要进位了，就变成10了（注意这不是十，读成一零就行了） 当然，仅仅有两种信号还不够，我们还需要逻辑门来辅助我们完成更多的计算，最基本的逻辑关系是与、或、非，而逻辑门就有相应的是与门、或门和非门，可以用电阻、电容、二极管、三极管等分立原件构成（具体咋构成的咱这里就不说了） 比如与操作，因为只有两种类型，我们一般将1表示为真，0表示为假，与操作（用&amp;表示）要求两个数参与进来，比如： 1 &amp; 1 = 1 必须两边都是真，结果才为真。 1 &amp; 0 = 0 两边任意一个或者都不是真，结果为假。 或运算（用 | 表示）： 1 | 0 = 1 两边只要有一个为真，结果就为真 0 | 0 = 0 两边同时为假，结果才是假 非运算实际上就是取反操作（可以是 ! 表示） !1 = 0 !0 = 1 非运算会将真变成假，假变成真 有了这些运算之后，我们的电路不仅仅可以实现计算，也可以实现各种各样的逻辑判断，最终才能发展成我们的计算机。 前面我们大概介绍一下计算机的底层操作原理，接着我们来看看计算机的基本组成。 相信各位熟知的计算机都是一个屏幕+一个主机的形式，然后配上我们的键盘鼠标，就可以开始使用了，但是实际上标准的计算机结构并没有这么简单，我们来看看： 我们电脑最核心的部件，当属CPU，因为几乎所有的运算都是依靠CPU进行（各种各样的计算电路已经在CPU中安排好了，我们只需要发送对应的指令就可以进行对应的运算），它就像我们人的大脑一样，有了大脑才能进行思考。不过光有大脑还不行，还要有一些其他的部分来辅助工作，比如我们想向电脑里面打字，那么就需要连接一个键盘才能输入，我们想要点击桌面上的图标，那么就需要一个鼠标来操作光标，这些都是输入设备。我们的电脑开机之后显示器上会显示出画面，实际上显示器就是输出设备。 当然除了这些内容之外，我们的电脑还需要内存来保存运行时的一些数据，以及外存来保存文件（比如硬盘）等。我们常说的iPhone13 512G，这个512G并不是指的内存，而是指的外存，准确的说是用于存放文件硬盘大小，而真正的内存是我们常说的4G/6G/8G运行内存，内存的速度远高于外存的速度，所以1G内存的价格远超1G硬盘的价格。 计算机包括五大部件：运算器、控制器、存储器、输入和输出设备。有了这一套完整的硬件环境，我们的电脑才算是有了一个完整的身体。 问题：我们上面提到的这些硬件设备哪些是属于外设？ 操作系统概述前面我们了解了一下计算机的大致原理和组成结构，但是光有这一套硬件可不行，如何让这一套硬件按照我们想要的方式运作起来，也是非常重要的，这时我们就需要介绍操作系统了。 操作系统（operating system，简称OS）是管理计算机硬件与软件资源的计算机程序。操作系统需要处理如管理与配置内存、决定系统资源供需的优先次序、控制输入设备与输出设备、操作网络与管理文件系统等基本事务。操作系统也提供一个让用户与系统交互操作的界面。 一般在计算机专业大二，会开放《操作系统》课程，会详细讲解操作系统的底层运作机制和调度。 一般我们电脑上都安装了Windows操作系统（苹果笔记本安装的是MacOS操作系统），现在主流的电脑都已经预装Windows11了： 有了操作系统，我们的电脑才能真正运行起来，我们就可以轻松地通过键盘和鼠标来操作电脑了。 不过操作系统最开始并不是图形化界面，它类似于Windows中的命令提示符： 没有什么图标这些概念，只有一个简简单单的黑框让我们进行操作，通过输入命令来进行一些简单的使用，程序的运行结果也会在黑框框（命令行）中打印出来，不过虽然仅仅是一个黑框，但是能运行的程序可是非常非常多的，只需要运行我们编写好的程序，就能完成各种各样复杂的计算任务，并且计算机的计算速度远超我们的人脑。 中国超级计算机系统天河二号，计算速度达到每秒5.49亿亿次。 当然，除了我们常见的Windows和MacOS系统之外，还有我们以后需要经常打交道的Linux操作系统，这种操作系统是开源的，意思是所有的人都可以拿到源代码进行修改，于是就出现了很多发行版： 这些发行版有带图形化界面的，也有不带图形化界面的，不带图形化界面的Linux将是我们以后学习的重点。 不同操作系统之间的软件并不是通用的，比如Windows下我们的软件一般是.exe后缀名称，而MacOS下则不是，并且也无法直接运行.exe文件，这是因为不同操作系统的具体实现会存在一些不同，程序编译（我们之后会介绍到）之后的格式也会不同，所以是无法做到软件通用的。 正是因为有了操作系统，才能够组织我们计算机的底层硬件（包括CPU、内存、输入输出设备等）进行有序工作，没有操作系统电脑就如同一堆废铁，只有躯壳没有灵魂。 计算机编程语言现在我们大致了解了我们的电脑的运作原理，实际上是一套完整的硬件+一个成形的操作系统共同存在的。接着我们就可以开始了解一下计算机的编程语言了。我们前面介绍的操作系统也是由编程语言写出来的，操作系统本身也算是一个软件。 那么操作系统是如何让底层硬件进行工作的呢？实际上就是通过向CPU发送指令来完成的。 计算机指令就是指挥机器工作的指示和命令，程序就是一系列按一定顺序排列的指令，执行程序的过程就是计算机的工作过程。指令集，就是CPU中用来计算和控制计算机系统的一套指令的集合，而每一种新型的CPU在设计时就规定了一系列与其他硬件电路相配合的指令系统。而指令集的先进与否，也关系到CPU的性能发挥，它也是CPU性能体现的一个重要标志。 我们电脑中的CPU有多种多样的，不同的CPU之间可能也会存在不同的架构，比如现在最常用的是x86架构，还有我们手机平板这样的移动设备使用的arm架构，不同的架构指令集也会有不同。 我们知道，计算机底层硬件都是采用的0和1这样的二进制表示，所以指令也是一样的，比如（这里随便写的）： 000001 - 代表开机 000010 - 代表关机 000011 - 代表进行加法运算 当我们通过电路发送给CPU这样的二进制指令，CPU就能够根据我们的指令执行对应的任务，而我们编写的程序保存在硬盘中也是这样的二进制形式，我们只需要将这些指令组织好，按照我们的思路一条一条执行对应的命令，就能够让计算机计算任何我们需要的内容了，这其实就是机器语言。 不过随着时代的进步，指令集越来越大，CPU支持的运算类型也越来越多，这样的纯二进制编写实在是太累了，并且越来越多的命令我们根本记不住，于是就有了汇编语言。汇编语言将这些二进制的操作码通过助记符来替换： MOV 传送字或字节。 MOVSX 先符号扩展,再传送。 MOVZX 先零扩展,再传送。 PUSH 把字压入堆栈。 把这些原有的二进制命令通过一个单词来代替，这样是不是就好记多了，在程序编写完成后，我们只需要最后将这些单词转换回二进制指令就可以了，这也是早期出现的低级编程语言。 不过虽然通过这些助记符就能够很轻松地记住命令，但是还是不够方便，因为可能我们的程序需要完成一个很庞大的任务，但是如果还是这样一条一条指令进行编写，是不是太慢了点，有时候可能做一个简单的计算，都需要好几条指令来完成。于是，高级编程语言——C语言，终于诞生了。 C语言诞生于美国的贝尔实验室，由丹尼斯·里奇（Dennis MacAlistair Ritchie）以肯尼斯·蓝·汤普森（Kenneth Lane Thompson）设计的B语言为基础发展而来，在它的主体设计完成后，汤普森和里奇用它完全重写了UNIX操作系统，且随着UNIX操作系统的发展，C语言也得到了不断的完善。 高级语言不同于低级语言，低级语言的主要操作对象是指令本身，而高级语言却更加符合我们人脑的认知，更像是通过我们人的思维，去告诉计算机你需要做什么，包括语法也会更加的简单易懂。下面是一段简单的C语言代码： 123456int main() &#123; int a = 10; //定义一个a等于10 int b = 10; //定义一个b等于10 int c = a + b; //语义非常明确，c就是a加上b计算出来的结果。 return 0;&#125; 不过现在看不懂没关系，我们后面慢慢学。 C语言虽然支持按照我们更容易理解的方式去进行编程，但是最后还是会编译成汇编指令最后变成计算机可以直接执行的指令，不过具体的编译过程，我们不需要再关心了，我们只需要去写就可以了，而对我们代码进行编译的东西，称为编译器。 当然，除了C语言之外，还有很多其他的高级语言，比如Java、Python、C#、PHP等等，相比其他编程语言，C算是比较古老的一种了，但是时隔多年直至今日，其他编程语言也依然无法撼动它的王者地位： 可以看到在2021年9月，依然排在编程语言排行榜的第一名（Python和Java紧随其后），可见这门语言是多么的不可撼动，很多操作系统、高级编程语言底层实现，几乎都是依靠C语言去编写的（包括Java的底层也是C/C++实现的）所以学习这一门语言，对于理工科尤其是计算机专业极为重要，学好C语言你甚至可以融汇贯通到其他语言，学起来也会轻松很多。 那么从下节课开始，我们就先做好一些环境上的准备。 C语言开发环境部署完成开发环境部署之后，我们就可以使用C语言来将一句话输出到控制台了，成功编译运行下面的简单程序： 123456#include &lt;stdio.h&gt;int main() &#123; printf(&quot;Hello, World!\\n&quot;); return 0;&#125; 首先，我们既然要将我们编写的C语言代码进行编译，那么肯定得找到一个合适的编译器才行，现代的集成开发环境IDE一般都包含了这些编译器，所以我们不需要进行单独的安装。 我们只需要找一个集成开发环境去安装就行了，目前功能比较完善的集成开发环境有： Codeblocks（支持Windows、Linux、MacOS操作系统） Visual Studio（支持Windows、MacOS操作系统） CLion（支持Windows、Linux、MacOS操作系统） 这里我们就使用CLion作为我们的开发工具使用（这个IDE是收费的，但是学生可以申请免费使用，别担心，大学四年肯定是够你用了，选这个是考虑到后面同学们可能会继续学习Java，Java语言的推荐IDE也是同一个公司的产品，界面都长得差不多）当然如果你想要使用其他的开发工具，也可以，但是这里我们就不演示了。 首先前往官网下载：CLion: A Cross-Platform IDE for C and C++ by JetBrains 下载完成后我们直接点击安装： 如果你不是很熟悉，建议直接点Next安装到C盘默认路径，不要去修改，当然如果确实C盘没有空间，那可以自行修改为其他路径，但是注意最好路径中不要出现中文。 勾选一下创建快捷方式，然后继续点Next等待安装就行了： 安装完成后，我们可以直接打开： 这里会提示我们激活，点击按钮去官网注册一个账号。注册完成后，推荐去申请一下学生授权，因为试用只有30天：Jetbrains学生授权获取指南 - 知乎 (zhihu.com) 这里我们点击开始试用，然后就可以点击Continue了，现在成功来到主界面： 由于是英文，使用不太方便，所以我们安装一下中文插件： 现在我们就成功安装好CLion集成开发环境了。 现在我们来创建我们的第一个C语言项目（我们的程序是以一个项目的形式进行管理的，这里知道怎么创建就行了）： 这里选择C可执行文件，然后项目的保存位置可以自行修改，配置完成后点击创建： 可以看到，在创建之后，会自动为我们生成一段示例代码，而之后我们要编写的代码，都在生成的main.c中进行编写，除了这个文件，其他的全部不要去修改，也不用管是什么意思，后面我们会慢慢介绍。 接着我们需要配置一下工具链，选择捆绑的MinGW（如果已经有了就不需要配置了） 那么这段示例代码有了，我们如何编译运行呢？ 我们可以点击代码旁边的绿色三角形符号或是右上角的绿色三角形，就可以直接编译运行我们的代码了。运行的结果是在控制台输出一个“HelloWorld！”，当然我们也可以直接运行编译出来的可执行文件： 我们可以看到，这里生成了一个项目名称.exe文件，这种就是Windows环境下可以直接运行的应用程序，我们可以打开这个文件夹，直接使用cmd来运行： 运行出来的效果是一样的，这种程序实际上就是最原始的命令行程序，输入和输出都是在这种黑框框中进行的，而我们的主要学习目标也是这种命令行程序。 这样我们就配置好了开发环境，然后就不要去动其他的东西了，一般新手最容易遇到一些奇奇怪怪的问题。","categories":[{"name":"后端","slug":"后端","permalink":"http://example.com/categories/%E5%90%8E%E7%AB%AF/"},{"name":"C/C++","slug":"后端/C-C","permalink":"http://example.com/categories/%E5%90%8E%E7%AB%AF/C-C/"},{"name":"开发环境搭建","slug":"后端/C-C/开发环境搭建","permalink":"http://example.com/categories/%E5%90%8E%E7%AB%AF/C-C/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"C/C++","slug":"C-C","permalink":"http://example.com/tags/C-C/"},{"name":"后端","slug":"后端","permalink":"http://example.com/tags/%E5%90%8E%E7%AB%AF/"},{"name":"操作系统","slug":"操作系统","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"计算机","slug":"计算机","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"}]},{"title":"Markdwon 语法速查","slug":"语法速查","date":"2022-12-12T07:27:50.000Z","updated":"2022-12-12T08:35:38.154Z","comments":true,"path":"2022/12/12/语法速查/","link":"","permalink":"http://example.com/2022/12/12/%E8%AF%AD%E6%B3%95%E9%80%9F%E6%9F%A5/","excerpt":"本来想写个表格嘞，结果这破Markdown把我演示语法都给实现了，只能截图了…","text":"本来想写个表格嘞，结果这破Markdown把我演示语法都给实现了，只能截图了… 基础语法 扩展语法","categories":[{"name":"速查集","slug":"速查集","permalink":"http://example.com/categories/%E9%80%9F%E6%9F%A5%E9%9B%86/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://example.com/tags/Markdown/"},{"name":"技巧","slug":"技巧","permalink":"http://example.com/tags/%E6%8A%80%E5%B7%A7/"}]},{"title":"Python+Tesseract实现图片文字识别","slug":"Python-Tesseract实现图片文字识别","date":"2022-12-12T02:44:03.000Z","updated":"2022-12-12T05:53:23.654Z","comments":true,"path":"2022/12/12/Python-Tesseract实现图片文字识别/","link":"","permalink":"http://example.com/2022/12/12/Python-Tesseract%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E6%96%87%E5%AD%97%E8%AF%86%E5%88%AB/","excerpt":"什么是OCR？OCR，全称Optical Character Recognition ，中文释义为光学字符识别，是指对一个包含文本信息的图片文件的识别，目前比较流行的OCR有tesseractOCR和cnOCR,在这篇文章中我们使用识别效果较好的tesseractOCR。","text":"什么是OCR？OCR，全称Optical Character Recognition ，中文释义为光学字符识别，是指对一个包含文本信息的图片文件的识别，目前比较流行的OCR有tesseractOCR和cnOCR,在这篇文章中我们使用识别效果较好的tesseractOCR。 安装Tesseract-OCR和pytesseract首先我们要安装tesseract，这两个网址任选其一即可： Home · UB-Mannheim/tesseract Wiki (github.com) Index of /tesseract解释一下这些名称的含义，我们以最新版本v5.20举例：w64的w是指Windows系统，64则是指电脑CPU采用64位处理技术，setup就是安装包，后面的版本号很好理解了。但是如果版本号后面跟上alpha，dev的话就是指这个安装包为开发版或是预览版，大多数程序的开发板大多不稳定，所以这里我们就是用最新的v5.2.0稳定版安装包。 点击下载，下载完成后运行安装程序：选择语言，没有中文，只好选英文。 然后一直next，但是注意！在选择安装语言时这个Additional lauguage data千万不要全选，要不然下载过程特别慢，如果需要的话，只安装里面的 Chinese与English组件就行了。 接下来就比较简单了，直接next，等待安装完成即可。 安装完成后我们还得添加环境变量，打开自己安装tesseract的文件夹，复制路径： 回到桌面，右键此电脑：选择属性，点击高级系统设置，环境变量： 打开环境变量，双击用户变量的Path，新建变量： 把复制的路径粘贴进去，点确定，我们的环境配置就完成了。 验证安装win+r，输入cmd，输入 tesseract -v 再回车，如果出现了tesseract的版本信息就说明配置成功了。 为了在python中使用tesseract，我们需要安装pytesseract，直接在cmd中用pip安装就好了： 1pip install pytesseract （无视里面的黄色字体，是我电脑的问题，对安装什么的没有影响） 实现自动识别文字打开python编辑器，把这段代码复制进去： 1234567import pytesseractfrom PIL import Imagepytesseract.pytesseract.tesseract_cmd = &#x27;D://Tesseract-OCR//tesseract.exe&#x27; # 替换成你自己的tesseract安装路径text = pytesseract.image_to_string(Image.open(&#x27;D://input.png&#x27;)) # 替换成要识别的图片路径print(text) 用windows自带画图随便做个图： 运行输出为 Hello world ，完美。 怎么样，好玩吧？不仅这样，tesseract还可以识别中文！只不过得安装相应的库，这是下载链接： https://github.com/tesseract-ocr/tessdata/blob/main/chi_sim.traineddata下载下来中文训练包后，把包放到tessdata中就可以识别中文了。","categories":[{"name":"后端","slug":"后端","permalink":"http://example.com/categories/%E5%90%8E%E7%AB%AF/"},{"name":"Python","slug":"后端/Python","permalink":"http://example.com/categories/%E5%90%8E%E7%AB%AF/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"},{"name":"人工智能","slug":"人工智能","permalink":"http://example.com/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"}]},{"title":"2分钟速看Cookie","slug":"2分钟速看Cookie","date":"2022-12-11T14:02:46.000Z","updated":"2022-12-12T07:27:03.412Z","comments":true,"path":"2022/12/11/2分钟速看Cookie/","link":"","permalink":"http://example.com/2022/12/11/2%E5%88%86%E9%92%9F%E9%80%9F%E7%9C%8BCookie/","excerpt":"Cookie是什么？Cookie , 在百度百科中的介绍是指”储存在用户本地终端上的数据”,用人话来说就类似于浏览器在本地的缓存，它是网站用来识别用户的一个文本。一般来说，在我们打开网站时，网站的Web服务器会为用户生成一个ID信息，可以说这就是用户的网络”身份证“，然后这个”身份证“就会保存到用户的电脑本地，以后如果用户再次登入这个网站，Web服务器就可以读取这个文本，就可以获取用户的各个信息了，这个过程也就是登录。","text":"Cookie是什么？Cookie , 在百度百科中的介绍是指”储存在用户本地终端上的数据”,用人话来说就类似于浏览器在本地的缓存，它是网站用来识别用户的一个文本。一般来说，在我们打开网站时，网站的Web服务器会为用户生成一个ID信息，可以说这就是用户的网络”身份证“，然后这个”身份证“就会保存到用户的电脑本地，以后如果用户再次登入这个网站，Web服务器就可以读取这个文本，就可以获取用户的各个信息了，这个过程也就是登录。 Cookie的发送机制总体来说，每当我们第一次登录一个网站时，Web服务器就会发送一个Cookie到用户本地，在以后的登录中，用户本地的Cookie就会发送到Web服务器，从而验证自己的账户，用一张图来表示： Cookie的组成Cookie本质上还是一个文本数据，一般这个数据是经过加密的，由名称，值，还有几个用于控制Cookie使用范围或有效时间等量组成。 名称和值 Name/Value：Cookie的名称以及值。 有效期 Expires：Cookie的有效期。Expriers分为两种存储方式：会话性与持久性。会话性Cookie，保存在用户的内存中，会在推出浏览器时清空；而持久性Cookie会保存在用户的本地硬盘中，直至用户退出登录时才会失效 。说人话就是一个临时存储，一个长久存储。 使用范围 Domain：Cookie的使用于访问范围。 安全性 Secure：Cookie是否使用Https协议。 总结Cookie是网站用于识别用户身份，保存在用户本地上的数据（经过加密），由用户本地暂时或长久保存的文本数据，一般由名称，值，有效期，使用范围等组成。","categories":[{"name":"前端","slug":"前端","permalink":"http://example.com/categories/%E5%89%8D%E7%AB%AF/"},{"name":"Web","slug":"前端/Web","permalink":"http://example.com/categories/%E5%89%8D%E7%AB%AF/Web/"}],"tags":[{"name":"Web","slug":"Web","permalink":"http://example.com/tags/Web/"},{"name":"前端","slug":"前端","permalink":"http://example.com/tags/%E5%89%8D%E7%AB%AF/"},{"name":"小知识","slug":"小知识","permalink":"http://example.com/tags/%E5%B0%8F%E7%9F%A5%E8%AF%86/"}]},{"title":"上千字干货带你深入了解C/C++动态规划","slug":"上千字干货带你深入了解C-C-动态规划","date":"2022-12-11T13:58:52.000Z","updated":"2022-12-12T08:53:14.259Z","comments":true,"path":"2022/12/11/上千字干货带你深入了解C-C-动态规划/","link":"","permalink":"http://example.com/2022/12/11/%E4%B8%8A%E5%8D%83%E5%AD%97%E5%B9%B2%E8%B4%A7%E5%B8%A6%E4%BD%A0%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3C-C-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/","excerpt":"提醒：本文需读者具有以下C/C++基础： 循环结构，数组 函数 递归","text":"提醒：本文需读者具有以下C/C++基础： 循环结构，数组 函数 递归 动态规划的定义 动态规划（Dynamic Programming，简称DP），是一种通过把复杂问题分解为相对简单的子问题的方式求解最优策略的方法，可以有效的解决背包问题、资源分配问题、最短路径问题和复杂系统可靠性问题等求最优解策略问题。dynamic programming is a method for solving a complex problem by breaking it down into a collection of simpler subproblems. ——Wikipedia译文：一般这些子问题很相似，可以通过函数关系式递推出来。然后呢，动态规划就致力于解决每个子问题一次，减少重复计算,比如斐波那契数列就可以看做入门级的经典动态规划问题。 ——维基百科 说实话，我看我也头痛，拿来装杯不错，真理解还得靠自己啊！我给大家翻译翻译什么叫动态规划：动态规划，别看名字很高深，其实本质就是将复杂的问题化为简单的子问题，再将子问题化为更为简单的子问题，直至简单到不能再简单，一下就能给出答案的程度。就酱，很复杂的题就迎刃而解了。还有动态规划Plus版，就是将每一次子问题的答案保存下来，这样以后要用到时直接调用就行了，效率更上十层楼。也就是记忆化搜索。 什么？还不能理解？那就看这几个小剧场： A：1+2+3+4+5+6+7=28，那么1+2+3+4+5+6+7+8等于几？B：36。A：你是怎么算出来的？B：1+2+3+4+5+6+7=28，那么1+2+3+4+5+6+7+8=28+8=36. 这就是记忆化搜索。 核心思想我个人将其总结为一型三征，一型就是动态规划适合解决的问题的模型， 三征也就是三个特征：最优子结构，无后效性，记忆化搜索。 由于过于抽象，以下内容不要求全部背下，但一定要能够说出这三个性质中粗体部分。1.最优子结构如果问题的最优解所包含的子问题的解也是最优的，我们就称该问题具有最优子结构性质（即满足最优化原理）。最优子结构性质为动态规划算法解决问题提供了重要线索。2.无后效性即子问题的解一旦确定，就不再改变，不受在这之后、包含它的更大的问题的求解决策影响。3.记忆化搜索也称子问题重叠性质，子问题重叠性质是指在用递归算法自顶向下对问题进行求解时，每次产生的子问题并不总是新问题，有些子问题会被重复计算多次。动态规划算法正是利用了这种子问题的重叠性质，每次计算完一次子问题的答案，再将答案保存下来，在遇到重复的自问题时直接调用之前保存的答案，从而获得更高的效率。 解题步骤综上所述，那么基本的动态规划题目的解题步骤大体就是酱：1. 寻找最优子结构(状态表示)2. 写出状态转移方程(状态计算)3. 边界初始化 光说不练是假把式，我们先来看一道力扣极为经典的题目——斐波那契数列。 509.斐波那契数列 某网友：啊，这个我熟！肥波纳粹数列！我：emm….. 滚去练打字！ 本题链接： 509. 斐波那契数 - 力扣（LeetCode） 题目描述 斐波那契数 （通常用 F(n) 表示）形成的序列称为 斐波那契数列 。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是： 12F(0) = 0，F(1) = 1F(n) = F(n - 1) + F(n - 2)，其中 n &gt; 1 给定 n ，请计算 F(n) 。 哎呀，这时候可能有人要说了： 欸嘿嘿，这不简单，直接一个递归不就行了吗 于是他兴冲冲地写完代码： 1234567class Solution &#123;public: int fib(int n) &#123; if(n==0||n==1) return n; return fib(n-1)+fib(n-2); &#125;&#125;; 复制粘贴提交： 可以看到勉强虽然但是差不多通过了，但用时极其夸张，那这是为什么呢？别急，我们先来分析一下这个代码的运算过程。 代码分析我们设 n=5 时，来看一下程序的运算过程： 欸，你发现了什么？ fib (3)在计算过程中计算了两次 没错，上图中圈画的fib (3)在计算过程中计算了两次，而当我们把 n 设的更大，比如说 n=7。 会发现重复计算已经不是一次两次了，甚至是整个分支都存在重复。而计算越庞大，比如 n=1000,10000，重复计算也就越多，时间复杂度就十分恐怖了， 要不是力扣大大好，题目中设定了 0&lt;=n&lt;=30，也就是不可能超过30，这样做法肯定会超时。既然存在这么大的问题，那要怎么优化呢？ 优化方案没错，记忆化搜索，我们在前面讲过了，当子问题存在大量重复计算时，利用子问题重叠性质，就可以将子问题的答案记录下来，在需要用到时就直接调用，一劳永逸，很轻松就解决了重复计算的问题。 123456789101112131415class Solution &#123;public: int fib(int n) &#123; if (n &lt; 2) &#123; return n; &#125; int p = 0, q = 0, r = 1; for (int i = 2; i &lt;= n; ++i) &#123; p = q; q = r; r = p + q; &#125; return r; &#125;&#125;; 提交上去： 效率完爆递归算法。 练习题单做完这道题，是不是觉得自己又”行”了？ 那我可得好好挫挫你的锐气，动态规划难题多的是！来，收下这份大礼包（难度依次增加）： 70. 爬楼梯 - 力扣（LeetCode） 746. 使用最小花费爬楼梯 - 力扣（LeetCode） Loading Question… - 力扣（LeetCode） 5. 最长回文子串 - 力扣（LeetCode） 53. 最大子数组和 - 力扣（LeetCode） 95. 不同的二叉搜索树 II - 力扣（LeetCode） 213. 打家劫舍 II - 力扣（LeetCode） 32. 最长有效括号 - 力扣（LeetCode） 123. 买卖股票的最佳时机 III - 力扣（LeetCode） 689. 三个无重叠子数组的最大和 - 力扣（LeetCode） ——————本文完结撒花——————","categories":[{"name":"后端","slug":"后端","permalink":"http://example.com/categories/%E5%90%8E%E7%AB%AF/"},{"name":"C/C++","slug":"后端/C-C","permalink":"http://example.com/categories/%E5%90%8E%E7%AB%AF/C-C/"},{"name":"算法","slug":"后端/C-C/算法","permalink":"http://example.com/categories/%E5%90%8E%E7%AB%AF/C-C/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"C/C++","slug":"C-C","permalink":"http://example.com/tags/C-C/"},{"name":"算法","slug":"算法","permalink":"http://example.com/tags/%E7%AE%97%E6%B3%95/"},{"name":"动态规划","slug":"动态规划","permalink":"http://example.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"}]}],"categories":[{"name":"后端","slug":"后端","permalink":"http://example.com/categories/%E5%90%8E%E7%AB%AF/"},{"name":"C/C++","slug":"后端/C-C","permalink":"http://example.com/categories/%E5%90%8E%E7%AB%AF/C-C/"},{"name":"开发环境搭建","slug":"后端/C-C/开发环境搭建","permalink":"http://example.com/categories/%E5%90%8E%E7%AB%AF/C-C/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"},{"name":"速查集","slug":"速查集","permalink":"http://example.com/categories/%E9%80%9F%E6%9F%A5%E9%9B%86/"},{"name":"Python","slug":"后端/Python","permalink":"http://example.com/categories/%E5%90%8E%E7%AB%AF/Python/"},{"name":"前端","slug":"前端","permalink":"http://example.com/categories/%E5%89%8D%E7%AB%AF/"},{"name":"Web","slug":"前端/Web","permalink":"http://example.com/categories/%E5%89%8D%E7%AB%AF/Web/"},{"name":"算法","slug":"后端/C-C/算法","permalink":"http://example.com/categories/%E5%90%8E%E7%AB%AF/C-C/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"C/C++","slug":"C-C","permalink":"http://example.com/tags/C-C/"},{"name":"后端","slug":"后端","permalink":"http://example.com/tags/%E5%90%8E%E7%AB%AF/"},{"name":"操作系统","slug":"操作系统","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"计算机","slug":"计算机","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"name":"Markdown","slug":"Markdown","permalink":"http://example.com/tags/Markdown/"},{"name":"技巧","slug":"技巧","permalink":"http://example.com/tags/%E6%8A%80%E5%B7%A7/"},{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"},{"name":"人工智能","slug":"人工智能","permalink":"http://example.com/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"},{"name":"Web","slug":"Web","permalink":"http://example.com/tags/Web/"},{"name":"前端","slug":"前端","permalink":"http://example.com/tags/%E5%89%8D%E7%AB%AF/"},{"name":"小知识","slug":"小知识","permalink":"http://example.com/tags/%E5%B0%8F%E7%9F%A5%E8%AF%86/"},{"name":"算法","slug":"算法","permalink":"http://example.com/tags/%E7%AE%97%E6%B3%95/"},{"name":"动态规划","slug":"动态规划","permalink":"http://example.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"}]}